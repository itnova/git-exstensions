#!/usr/bin/env bash

if [ $# -eq 0 ]; then
    set -- -h
fi
OPTS_SPEC="\
git preview support [<ref>]
git preview project [<ref>]
git preview feature [<ref>]
--
h,help        show the help
q             quiet
d             show debug messages
"
eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt -- "$@" || echo exit $?)"

PATH=$PATH:$(git --exec-path)
. git-sh-setup

require_work_tree

quiet=
debug=
command=
target=
rev=

debug()
{
    if [ -n "$debug" ]; then
        printf "%s\n" "$*" >&2
    fi
}

say()
{
    if [ -z "$quiet" ]; then
        printf "%s\n" "$*" >&2
    fi
}

progress()
{
    if [ -z "$quiet" ]; then
        printf "%s\r" "$*" >&2
    fi
}

#echo "Options: $*"

while [ $# -gt 0 ]; do
    opt="$1"
    shift
    case "$opt" in
        -q) quiet=1 ;;
        -d) debug=1 ;;

        --) break ;;
        *) die "Unexpected option: $opt" ;;
    esac
done

command="$1"
shift
case "$command" in
    support) target="support-preview" ;;
    feature) target="feature-preview" ;;
    project) target="project-preview" ;;
    *) die "Unknown command '$command'" ;;
esac

if [ $# -ge 1 ]; then
    rev="$1"
    shift
else
    rev="$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)"
fi

if [ ${rev} == ${target} ]; then
    die "Rev and target ar the same: '$rev'"
fi

git rev-parse -q --verify "$rev^{commit}" >/dev/null ||
die "'$rev' does not refer to a commit"

debug "command: {$command}"
debug "target: {$target}"
debug "rev: {$rev}"
debug "quiet: {$quiet}"
debug "opts: {$*}"
debug

cmd_preview()
{
    output="-q"
    if [[ ${debug} -eq 1 ]]; then
        output=
    fi

    if [ $# -eq 0 ]; then
        say "Merging $rev into $target"
        debug "push origin $rev"
        git push ${output} origin "$rev" || exit $?
        debug
        debug "checkout $target"
        git checkout ${output} "$target" || exit $?
        debug
        debug "fetch origin $rev"
        git fetch ${output} origin "$target" || exit $?
        debug
        debug "reset --hard origin/$target"
        git reset ${output} --hard origin/"$target" || exit $?
        debug
        debug "merge origin --no-edit origin/$rev"
        git merge ${output} --no-edit origin/${rev} || exit $?
        debug
        debug "push origin $target"
        git push ${output} origin "$target" || exit $?
        debug
        debug "checkout $rev"
        git checkout ${output} "$rev" || exit $?
        say "$rev is successfully merged into $target"
    else
        say "error: parameters were '$@'"
        die "Too many parameters."
    fi
}


cmd_support()
{
    cmd_preview "$@"
}

cmd_feature()
{
    cmd_preview "$@"
}

cmd_project()
{
    cmd_preview "$@"
}

"cmd_$command" "$@"